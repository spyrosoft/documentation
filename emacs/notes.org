* Navigation

** Page Down
   C-v

** Page Up
   M-v

** Move to top/bottom of buffer
   M-< / M->

** Return to Previous Mark
   C-u C-<SPC>

** Go to line
   M-g g

** Move page text to middle/top/bottom
   C-l

** Move page text heuristically around - similar to C-l
   C-S-l

** Move point to middle/top/bottom
   M-r

** Jump to matching delimiter
   C-M-n
   C-M-p

** Move point to first non-whitespace character in the current line
   M-m

** Forward one sentence
   M-e

** Backward one sentence
   M-a

** Forward one paragraph (or element)
   M-}

** Backward one paragraph (or element)
   M-{

** Set horizontal column navigation jump (semipermanent goal column)
   C-x C-n

** Remove semipermanent goal column
   C-u C-x C-n


* Marks and Regions

** Set a mark
   C-<SPC>

** Jump to current mark
   C-u C-<SPC>

** Swap mark and point
   C-x C-x

** Deactivate mark/region
   C-g

** Set global mark
   C-S-<SPC>

** Shift selection
   S-<ARROW KEY>

** Mark word forwards
   M-@

** Set mark at the end of the following balanced expression
   C-M-@

** Set region around current paragraph
   M-h

** Set region around entire buffer
   C-x h

** Indent region as a block (initiates transient mode - left and right arrows moves the block)
   C-x <TAB>

** Simulate pressing tab on all lines in region, even if region is inactive (C-u to indent multiple times)
   C-M-\


* Rectangle Regions

** Set a rectangle mark
   C-x <SPC>

** Kill the rectangle
   C-x r k

** Copy but don't delete the rectangle
   C-x r M-w

** Delete the rectangle but don't copy it
   C-x r d

** Yank the last killed rectangle in the current position of point
   C-x r y

** Use the current rectangle's dimensions to insert spaces to the left of the rectangle (for example, to insert spaces at the beginning of a line of code) (`open-rectangle')
   C-x r o

** Replace the contents of the rectangle with spaces
   C-x r c

** Insert numbered list numbers to the left of the selected rectangle - use C-u for styling & start #
   C-x r N

** Replace contents of rectangle with the specified string on each line
   C-x r t STRING <RET>


* Clipboard

** Cut all text between pointer and mark
   C-w

** Kill backward to the beginning of the previous word
   M-<DEL>

** Kill forward to the end of the next word
   M-d

** Add region to kill ring, but don't delete it
   M-w

** Kill to end of line
   C-k

** Kill to beginning of line
   M-0 C-k

** Kill through the next occurrence of a character
   M-z CHAR

** Kill to end of sentence
   M-k

** Kill to beginning of sentence
   C-x <DEL>

** After yanking, cycle through the kill ring the text just pasted
   M-y

** Append the next kill command to the previous one
   C-M-w


* Registers

** Store position of point and current buffer in register R (R is any character or number)
   C-x r <SPC> R

** Jump to register R
   C-x r j R

** Copy region into register R (C-u to also delete the region)
   C-x r s R

** Copy the region-rectangle into register R (C-u to also delete rectangle)
   C-x r r R

** Insert content from register R (C-u to place point after inserted text and mark at beginning)
   C-x r i R

** Append or prepend contents of region to register R
   M-x append-to-register <RET> R
   M-x prepend-to-register <RET> R

** Save the state of all windows in the current frame to register R
   C-x r w R

** Save the state of all windows and frames to register R
   C-x r f R

** Restore window/frame configuration from register R (Same as jump to stored cursor position) (C-u to delete existing frames/windows)
   C-x r j R

** Store a number into register R (Used for incrementing numbers during macro execution) (NUMBER is optional - defaults to 0)
   C-u NUMBER C-x r n R

** Increment the contents of register R by NUMBER amount (NUMBER is optional - defaults to 1)
   C-u NUMBER C-x r + R


* Bookmarks

** Add bookmark named current filename
   C-x r m <RET>

** List all bookmarks
   C-x r l

** Jump to the bookmark named BOOKMARK
   C-x r b BOOKMARK <RET>

** Review bookmark commands
   C-x r l C-h m

** Saves current position of all default bookmarks (Needed if opening a different emacs session)
   M-x bookmark-save

** Save and load context specific bookmark files
   M-x bookmark write <RET> FILENAME <RET>
   M-x bookmark load <RET> FILENAME <RET>


* Search and Replace

** Search
   C-s (also search again for the last serch term - regex included)

** Reverse Search
   C-r

** Search and Replace (C-u to go backwards)
   M-%

** Edit current search term (M-f when finished)
   M-e

** Regex search
   C-M-s
   C-M-r

** Cycle through previous searches
   M-n
   M-p

** Find all instances of a search and list them by lines (visit line with <RET> - press e to edit lines & C-c C-c to return again)
   M-s o
   M-x occur
   M-x multi-occur (for multiple buffers)

** Count the occurances of a regex
   M-x how-many

** Search for a newline
   C-j

** Append the word following point to the current search
   C-w

** Append the rest of the line following point to the current search (converts to lower to remain case insensitive)
   M-s C-e

** Search for variable or function name (also works after entering incremental search & toggles)
   M-s _

** Search for variable or function name at point
   M-s .

** Search for words ignoring spaces and punctuation
   M-s w

** Delete lines which match regex
   M-x flush-lines
   M-x keep-lines (the opposite)


* Undo/Redo

** Undo
   C-/

** Undo changes within region
   C-u C-/


* Macros

** Execute a command multiple times
   C-u command

** Execute the same keystroke multiple times (for example add 40 dashes)
   M-4 0 -

** Start Recording Macro
   f3
   C-x (

** Stop Recording Macro
   f4
   C-x )

** Play Macro
   f4
   C-x e (during macro definition, this exits the definition and executes it immediately - subsequent e strokes each execute the macro again)

** Play Macro Until No More
   C-u 0 C-x e

** Execute macro and append additional keystrokes
   C-u f3

** Do not execute macro - only append additional keystrokes
   C-u C-u f3

** Edit the last defined macro
   C-x C-k C-e

** Edit the currently selected macro step by step (There are a ton of additional command insertion and replacement commands - see manual)
   C-x C-k <SPC>

** Cycle to next defined macro in ring (chains with the next two commands)
   C-x C-k C-n

** Cycle to previous defined macro in ring (chains)
   C-x C-k C-p

** Execute current head of the defined macro ring (Chains with the previous two commands)
   C-x C-k C-k

** Name the head of the macro ring
   C-x C-k n

** Edit a previously named/command-assigned macro
   C-x C-k e NAME <RET>
   C-x C-k e COMMAND

** Assign most recently defined macro a meta command
   C-x C-k n

** Assign most recently defined macro control command
   C-x C-k b (recommended C-x C-k [0-9A-Z]

** Insert macro counter into buffer and increment
   C-x C-k C-i
   f3 (while recording)

** Set macro counter
   C-x C-k C-c

** Specify format for inserting the macro counter
   C-x C-k C-f

** Add arbitrary number to the macro counter
   C-u # C-x C-k C-a (C-u value is optional - if blank the last macro counter inserted is substituted)

** At any point during the recording of a macro, set a breakpoint
   C-x q (upon execution, C-r enters recursive editing - resume with C-M-c) (C-u enters recursive ediding during the recording process as well)

** Execute macro on all lines in a region
   C-x C-k r

** Store macro in register R
   C-x C-k x R

** Execute macro stored in register R (Same as jump to position)
   C-x r j R

** Save macro to file (and M-x load-file later)
   M-x insert-kbd-macro <RET> MACRONAME <RET>


* Frames/Windows/Buffers

** Clear all buffers but this one
   C-x 0

** Close a Buffer
   C-x k

** Switch to a Buffer
   C-x b

** Split vertically (C-u to specify column width - negative for right column)
   C-x 3

** Split horizontally (C-u to specify number of lines - negative for upper row)
   C-x 2

** Switch to a split (C-u to move more than one - includes minibuffer)
   C-x o

** Navigate to previously viewed buffer
   C-x <LEFT>/<RIGHT>

** Delete selected window and kill its buffer
   C-x 4 0

** Resizing Windows

*** Increase height (C-u with a negative argument shrinks it instead)
    C-x ^

*** Increase width
    C-x }

*** Decrease width
    C-x {

*** Make all windows the same height (`malance-windows')
    C-x +

*** Shrink this window if its buffer doesn't need so many lines
    C-x -

** Toggle current buffer to read only
   C-x C-q

** Display all buffers
   C-x C-b

** Display all buffers of visited files
   C-u C-x C-b

** Take the current buffer and clone it to a different buffer with its own name, point, narrowing, markers, major modes, and local variables (C-u to prompt for a name for it)
   M-x clone-indirect-buffer

** Select a buffer and split into a new window (default horizontal/vertical)
   C-x 4 b BUFFER <RET>

** Select a buffer and split into a new frame (frames seem to be gui only)
   C-x 5 b BUFFER <RET>

** Delete frame
   C-x 5 0

** Create new frame and switch to it (in terminal mode, all buffers seem to be available from all frames - the only benefit it seems to have is arrangement of buffers)
   C-x 5 2

** Switch to a frame
   C-x 5 o

** Add current buffer to the end of another buffer
   M-x append-to-buffer

** Insert contents of a buffer at point
   M-x insert-buffer

** Rename a buffer to make room for a new default buffer of the same type, such as `*shell*'
   M-x rename-buffer
   M-x rename-uniquely

** Open a menu to selectively remove buffers (tons of commands in this mode - see 19.5 Buffers)
   M-x buffer-menu

** Close all open buffers which have had no changes made to them
   M-x clean-buffer-list

** Prompt to close each buffer one at a time
   M-x kill-some-buffers


* Minibuffers

** Scroll the content (such as in the help context)
   C-M-v
   M-<PageUp>/<M-PageDown>

** Enter a minibuffer to navigate through the items with the arrow keys
   M-v


* Narrowing

** Narrow down to content between point and mark
   C-x n n

** Widen to entire buffer again
   C-x n w

** Narrow down to current page
   C-x n p

** Narrow down to current defun
   C-x n d


* Editing

** Swap two lines
   C-x C-t

** Swap two surrounding words and move forward one
   M-t

** Swap two surrounding characters and move forward one
   C-t

** Insert newline on the next line and keep point where it is
   C-o

** Insert newline without indentation
   C-j

** Insert a literal tab character
   C-q <TAB>

** Remove all but one of many consecutive newlines
   C-x C-o

** Remove all whitespace around point and replace it with a single space
   M-<SPC>

** Remove all whitespace around point
   M-\

** Join current line with previous line excluding tabulation and newline
   M-^

** Complete the word before point using words in the current buffer (cycles matching words) (C-u to search forward)
	 M-/

** Complete the word before point using a compilation of all of the matches found in the current buffer
	 C-M-/

** Convert all spaces to tabs
   M-x tabify

** Insert Unicode Character
   C-x 8 <RET> NAME OF UNICODE CHARACTER (autocompletes) <RET>

** Show information about character at point including cursor position and character encoding (C-u for even more information)
   C-x =

** Diff two files
   M-x diff

** Diff buffer with contents on disk
   M-x diff-buffer-with-file

** Jump to the first instance of differing text in two windows (C-u to ignore whitespace)
   M-x compare-windows


* Case Conversion

** Convert following word to Lower Case
	 M-l

** Convert following word to Upper Case
	 M-u

** Capitalize the following word
	 M-c

** Convert word before point to capital
   M-- M-c

** Convert word before point to Lower Case
   M-- M-l

** Convert word before point to Upper Case
   M-- M-u

** Convert region to Lower Case
   C-x C-l

** Convert region to Upper Case
   C-x C-u


* Files and Directories

** Save a file
   C-x C-s

** Save all open files
   C-x s

** Open a file
   C-x C-f

** Save a file as
   C-x C-w

** Quote a file name with special characters
   /:/tmp/delete~me

** Revert a buffer
   M-x revert-buffer

** Open a directory for browsing (don't specify a file name)
   C-x C-f

** Update the contents of a buffer in Dired (directory edit) mode
   g

** Reload the file contents periodically (like unix tail command)
   M-x auto-revert-tail-mode
   M-x auto-revert-mode

** In combination with the auto-revert-mode, a buffer will revert without asking (useful for directories)
   M-x revert-without-query

** Open a file read-only
   C-x C-r

** Make a directory
   M-x make-directory

** Delete a directory
   M-x delete-directory

** Open an alternate file (replaces the buffer containing the file found previously)
   C-x C-v

** Open a file and split the frame (default split horizontal/vertical)
   C-x 4 f

** Open a file in another frame (in gui mode, a separate x window opens, but if you close one, the other closes)
   C-x 5 f

** Open a file by file name alone from the file name cache
   C-x C-f FILE-NAME

** Filesets

*** Add a buffer to a fileset (requires filesets-init to be run first - if BUFFER-NAME doesn't exist, it is created)
    M-x filesets-add-buffer <RET> BUFFER-NAME <RET>

*** Remove buffer from a fileset
    M-x filesets-remove-buffer

*** Edit a fileset
    M-x filesets-edit

*** Open a fileset
    M-x filesets-open

*** Close all buffers in a fileset
    M-x filesets-close

*** Run a shell command on a fileset
    M-x filesets-run-cmd

*** Edit the current filesets
    M-x filesets-edit

** Add a directory to the file name cache
   M-x file-cache-add-directory <RET> DIRECTORY <RET>
   M-x file-cache-add-directory-using-find <RET> DIRECTORY <RET>

** Add a list of directories via a Lisp variable
   M-x file-cache-add-directory-list <RET> VARIABLE <RET>

** View the current file name cache
   M-x file-cache-display

** Drag and drop file into emacs
   Opens file, or moves file to directory if in Dired

** Open a file exactly the way it is - including Windows newlines or weird character encoding
   M-x find-file-literally
   Emacs converts files to the set default character encoding and newline type when opening a file and converts them back again upon saving.

** Forget that the current buffer has been changed (opposite with C-u)
   M-~


* Modes

** Display information about the current modes
   C-h m


* Tags

** Tags tables are generated by the etags shell command
	 --include=FILE links multiple TAGS files together

** Load a tags table
	 M-x visit-tags-table

** A list of tags tables of file name `TAGS' can be added to your config file
	 (setq tags-table-list '("~/.emacs.d" "~/programming/"))

** Jump to a tag
	 M-. TAG <RET>

** Find the next alternate definition of the last tag specified
	 C-u M-.

** Jump back to previous tag
	 C-u - M-.

** Regex match a tag
	 C-M-. PATTERN <RET>

** Jump to the next tag that matches the last pattern used
	 C-u C-M-.

** Return to location prior to invoking a jump command
	 M-*

** Multi-file search through the files listed in the current tags table
	 M-x tags-search <RET> REGEXP <RET>

** Multi-file regex replace through the files listed in the current tags table
	 M-x tags-query-replace <RET> REGEXP <RET> REPLACEMENT <RET>

** Restart a previous multi-file search from current point
	 M-,

** Autocomplete current word using definitions from the tags table
	 C-M-i

** List all of the tags in a tags file
	 M-x list-tags <RET> FILE <RET>

** Visit each file in the tags table in order
	 M-x next-file


* Text Tables

** Tables must begin in a proper table configuration - rectangular shape with + - = & | for borders

** The following are examples of _invalid_ tables: (25.14.1)

        +-----+       +--+    +-++--+
        |     |       |  |    | ||  |
        |     |       |  |    | ||  |
        +--+  |    +--+--+    +-++--+
        |  |  |    |  |  |    +-++--+
        |  |  |    |  |  |    | ||  |
        +--+--+    +--+--+    +-++--+
           a          b          c

From left to right:

  a. Overlapped cells or non-rectangular cells are not allowed.

  b. The border must be rectangular.

  c. Cells must have a minimum width/height of one character

** Create a new table from scratch
	 M-x table-insert

** Instruct emacs to recognize all tables in the current buffer
	 M-x table-recognize

** There are a number of table recognize/unrecognize commands
	 M-x table-<TAB>

** Add columns/rows
	 M-x table-insert-column
	 M-x table-insert-row

** Delete columns/rows
	 M-x table-delete-column
	 M-x table-delete-row

** Merge two cells
	 M-x table-span-cell

** Split a cell into two
	 M-x table-split-cell

** Make a cell taller
	 M-x table-heighten-cell

** Make a cell shorter
	 M-x table-shorten-cell

** Make a cell wider
	 M-x table-widen-cell

** Make a cell narrower
	 M-x table-narrow-cell

** Justify text inside a cell
	 M-x table-justify

** Fill a table with sequential numbers
	 M-x table-insert-sequence

** Convert table like logic text to a text table
	 M-x table-capture


* Highlighting

** Highlight all instances of current word
   M-s h .

** Unhighlight all instances of regex (defaults to most recent regex - M-n & M-p to cycle)
   M-s h u REGEX <RET>

** Cycle through highlight faces
   M-n
   M-p

** Highlight entire line containing matching regex
   M-s h l REGEX <RET> FACE <RET>


* Shell Commands

** Change default directory
   M-x cd

** Echo current directory
   M-x pwd

** Environment variables are available in file completion
   /example/$NAMED/environment/variable


* Lisp

** Read in and eval a Lisp expression in the minibuffer, then insert the result at point
	 C-u M-:

** Read in and eval a Lisp expression in the minibuffer, then display the result in the echo area
   M-:

** Eval the Lisp expression at point and insert the result in place of the expression
	 C-u C-x C-e

** Eval the Lisp expression at point and display the result in the echo area
	 C-x C-e

** Evaluate the expression at point and insert its value in the buffer (in Lisp interaction mode)
	 C-j

** Evaluate the current function and display the result in the echo area (useful for writing/debugging Lisp)
	 C-M-x

** Evaluate the current region or entire buffer
	 M-x eval-region
	 M-x eval-buffer

** See section 27.7


* Version Control (git specific)

** Pull
	 C-x v +

** Do the "most appropriate" action on the current VC fileset (e.g. adding, committing, or merging changes)
	 C-x v v

** Enter a commit message into the vc-log buffer and save it
	 C-c C-c

** Delete a file
	 M-x vc-delete-file

** Rename a file
	 M-x vc-rename-file

** Register a file to version control
	 C-x v i

** Create a tag
	 C-x v s NAME <RET>

** Switch to a tag (the branch automatically switches if the specified tag is found there)
	 C-x v r NAME <RET>

** Diff the files in the current vc-fileset with the previous commit (C-u to specify two specific revisions)
	 C-x v =

** Open a revision of the current file in a new buffer
	 C-x v ~

** Revert changes to the current vc-fileset to the last revision
	 C-x v u

** Add a file to the ignore list
	 C-x v G

** Open a directory in vc mode
	 C-x v d

*** Mark a file
		m

*** Mark all files of the type at point
		M

*** Unmark a file
		u

*** Unmark all files of the type at point
		U

*** Apply the next appropriate vc action
		v

*** Jump to next directory entry
		<TAB>

*** Jump to previous directory entry
		S-<TAB>

*** Hide files with `up-to-date' status (C-u hides those with the status of the item at point)
		x

** Enter annotations mode on the current file (28.1.6)
	 C-x v g

*** Hide annotations - only show the code
		v

*** Show the log of the current line's revision
		l

*** Visit a previous commit
		p

*** Visit the next commit
		n

*** Jump to the revision of the line at point
		j

** Display the change log for the current fileset (doing so on . in dired is the same as C-x v L)
	 C-x v l

*** Move down one revision entry
		n

*** Move up one revision entry
		p

*** Go to log of next file
		N

*** Go to log of previous file
		P

*** Display a diff between the revision at point and the previous revision
		d

*** Display a diff between all files in the the revision at point and their previous revisions
		D

*** From compact log view, such as C-x v l on a directory, toggle entry details
		<RET>

** Display the change log graph for the repository
	 C-x v L

** Display the changes that a pull request would retrieve
	 C-x v I

** Display the changes that the next push will send
	 C-x v O

** There are branching commands, but it may be better to do this via the command line (28.1.11.1,4)

** Merge branches
	 C-x v m


* Abbrev

** Dynamically expand word/symbol at point
	 M-/

** Define a new global abbrev
	 M-x define-global-abbrev <RET> ABBREV <RET> EXPANSION <RET>

** Define a new mode specific abbrev
	 M-x define-mode-abbrev <RET> ABBREV <RET> EXPANSION <RET>

** Edit the current list of abbrevs
	 M-x edit-abbrevs

** Expand abbreviation before point
	 C-x a e

** Prepend a prefix to an abbrev (typed after the prefix, before the abbrev)
	 M-'

** Add a global abbrev using one or more words before point as its expansion
	 C-x a g

** Add a mode specific abbrev using one or more words before point as its expansion
	 C-x a l

** Add a global abbrev using a word in the current buffer
	 C-x a i g

** Add a mode specific abbrev using a word in the current buffer
	 C-x a i l


* Dired

** Open Dired
	 C-x C-f <DIR>

** Mark a file for deletion
	 d

** Delete all marked files
	 x

** Open a file
	 <RET>
	 f
	 e

** Go up a directory
	 ^

** Edit file names or permissions (toggle back with C-c C-c)
	 C-x C-q

** Open a file in read-only mode
	 v

** Navigate up/down items
	 p
	 n

** Mark the current file
	 m

** Copy the current file/directory
	 C

** Rename the current file/directory
	 R

** Add the subdirectory at point to the current listing (a mark is set where point was) (^ visits parent directory in same buffer)
	 i

** Remove subdirectory listing (move point to directory listing heading)
	 C-u k

** Navigate to the next directory listing
	 C-M-n

** Navigate to the previous directory listing
	 C-M-p

** Navigate to the next directory item
	 >

** Navigate to the previous directory item
	 <

** Reload all directory contents
	 g

** Toggle between alpha and date/time sorting
	 s

** Use a shell find expression
	 M-x find-name-dired

** Directory Hiding

*** Toggle hide/show directory listing at point
	 	$

*** Toggle hide/show all directory listings
	 	M-$

*** Items in hidden directories are unaffected by normal dired commands

** Remove items from the directory listing display
	 k

** Search all of the specified files for a regex
	 A REGEX <RET>

** Query replace all of the specified files for a regex
	 Q REGEX <RET> TO <RET>

** Run a shell command on the selected files (postpend ; to your command to run sequentially on each file)
	 ! COMMAND <RET>

** Touch the current file
	 T

** Make a hard link
	 H

** Make a symbolic link
	 S

** Change the mode
	 M

** Change the group
	 G

** Change the owner
	 O

** Diff the current file with another
	 =

** Mark all files in the current directory
	 * s

** Mark all directories in the current directory
	 * /

** Mark all executable files
	 * *

** Mark all symbolic links
	 * @

** Remove a mark
	 u

** Remove mark and move to previous line
	 <DEL>

** Remove all marks from files
	 * !

** Remove all marks (C-u prompts y/n for each)
	 M-<DEL>

** Remove all marks of a specific type
	 * ? MARKCHAR

** Jump to next marked file
	 M-}

** Jump to previous marked file
	 M-{

** Toggle all marks
	 t

** Replace all occurences of a specific mark with another
	 * c OLD NEW
   To illustrate the power of this command, here is how to put `D' flags on all the files that have no marks, while unflagging all those that already have `D' flags:
   * c D t  * c <SPC> D  * c t <SPC>
   This assumes that no files were already marked with `t'.

** Mark all regex matches with *
	 * % REGEX <RET>

** Mark all file regex matches with *
	 % g REGEX <RET>

** Convert all marked file/directory names to lower case
	 % l

** Regex search and replace marked file/directory names
	 % R REGEX <RET> TO <RET>

** Regex copy marked files/directories
	 % C REGEX <RET> TO <RET>

** Compress the current file
	 Z

** Decrypt specified files
	 :d

** Verify digital signature of specified files
	 :v

** Digitally sign specified files
	 :s

** Encrypt specified files
	 :e


* GUI

** Skipped over this - see chapter 21


* HELP

** Find in help something that matches a keyword
   C-h a

** Find in help what a specific key sequence does
   C-h k

** Search for variables whose values match the specified pattern
   M-x apropos-value


* Misc

** Display the system time
   M-x display-time

** There's a thing called file shadowing which seems to be useful for servers...?
   C-h a shadow

** Insert automatically updating timestamp into file - each time the file saves - add (time-stamp) to the `before-save-hook'.
   Time-stamp: <> (in the first few lines of the file)

** Look up a Unix command
	 M-x man
	 M-x woman
